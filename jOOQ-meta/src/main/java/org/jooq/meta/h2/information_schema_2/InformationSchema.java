/*
 * This file is generated by jOOQ.
 */
package org.jooq.meta.h2.information_schema_2;


import java.util.Arrays;
import java.util.List;

import org.jooq.Table;
import org.jooq.impl.DSL;
import org.jooq.impl.SchemaImpl;
import org.jooq.meta.h2.information_schema_2.tables.Columns;
import org.jooq.meta.h2.information_schema_2.tables.Domains;
import org.jooq.meta.h2.information_schema_2.tables.Indexes;
import org.jooq.meta.h2.information_schema_2.tables.Schemata;
import org.jooq.meta.h2.information_schema_2.tables.Sequences;
import org.jooq.meta.h2.information_schema_2.tables.Synonyms;
import org.jooq.meta.h2.information_schema_2.tables.Tables;
import org.jooq.meta.h2.information_schema_2.tables.Views;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class InformationSchema extends SchemaImpl {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>INFORMATION_SCHEMA</code>
     */
    public static final InformationSchema INFORMATION_SCHEMA = new InformationSchema();

    /**
     * The table <code>INFORMATION_SCHEMA.COLUMNS</code>.
     */
    public final Columns COLUMNS = Columns.COLUMNS;

    /**
     * The table <code>INFORMATION_SCHEMA.DOMAINS</code>.
     */
    public final Domains DOMAINS = Domains.DOMAINS;

    /**
     * The table <code>INFORMATION_SCHEMA.INDEXES</code>.
     */
    public final Indexes INDEXES = Indexes.INDEXES;

    /**
     * The table <code>INFORMATION_SCHEMA.SCHEMATA</code>.
     */
    public final Schemata SCHEMATA = Schemata.SCHEMATA;

    /**
     * The table <code>INFORMATION_SCHEMA.SEQUENCES</code>.
     */
    public final Sequences SEQUENCES = Sequences.SEQUENCES;

    /**
     * The table <code>INFORMATION_SCHEMA.SYNONYMS</code>.
     */
    public final Synonyms SYNONYMS = Synonyms.SYNONYMS;

    /**
     * The table <code>INFORMATION_SCHEMA.TABLES</code>.
     */
    public final Tables TABLES = Tables.TABLES;

    /**
     * The table <code>INFORMATION_SCHEMA.VIEWS</code>.
     */
    public final Views VIEWS = Views.VIEWS;

    /**
     * No further instances allowed
     */
    private InformationSchema() {
        super(DSL.name("INFORMATION_SCHEMA"), null, DSL.comment(""));
    }

    @Override
    public final List<Table<?>> getTables() {
        return Arrays.asList(
            Columns.COLUMNS,
            Domains.DOMAINS,
            Indexes.INDEXES,
            Schemata.SCHEMATA,
            Sequences.SEQUENCES,
            Synonyms.SYNONYMS,
            Tables.TABLES,
            Views.VIEWS
        );
    }
}
