/*
 * This file is generated by jOOQ.
 */
package org.jooq.meta.duckdb.system.main.tables;


import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.meta.duckdb.system.main.Main;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DuckdbIndexes extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>system.main.duckdb_indexes</code>
     */
    public static final DuckdbIndexes DUCKDB_INDEXES = new DuckdbIndexes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>system.main.duckdb_indexes.database_name</code>.
     */
    public final TableField<Record, String> DATABASE_NAME = createField(DSL.name("database_name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>system.main.duckdb_indexes.database_oid</code>.
     */
    public final TableField<Record, Long> DATABASE_OID = createField(DSL.name("database_oid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>system.main.duckdb_indexes.schema_name</code>.
     */
    public final TableField<Record, String> SCHEMA_NAME = createField(DSL.name("schema_name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>system.main.duckdb_indexes.schema_oid</code>.
     */
    public final TableField<Record, Long> SCHEMA_OID = createField(DSL.name("schema_oid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>system.main.duckdb_indexes.index_name</code>.
     */
    public final TableField<Record, String> INDEX_NAME = createField(DSL.name("index_name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>system.main.duckdb_indexes.index_oid</code>.
     */
    public final TableField<Record, Long> INDEX_OID = createField(DSL.name("index_oid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>system.main.duckdb_indexes.table_name</code>.
     */
    public final TableField<Record, String> TABLE_NAME = createField(DSL.name("table_name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>system.main.duckdb_indexes.table_oid</code>.
     */
    public final TableField<Record, Long> TABLE_OID = createField(DSL.name("table_oid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>system.main.duckdb_indexes.comment</code>.
     */
    public final TableField<Record, String> COMMENT = createField(DSL.name("comment"), SQLDataType.VARCHAR, this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<Record, Object> TAGS = createField(DSL.name("tags"), DefaultDataType.getDefaultDataType("MAP(VARCHAR, VARCHAR)"), this, "");

    /**
     * The column <code>system.main.duckdb_indexes.is_unique</code>.
     */
    public final TableField<Record, Boolean> IS_UNIQUE = createField(DSL.name("is_unique"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>system.main.duckdb_indexes.is_primary</code>.
     */
    public final TableField<Record, Boolean> IS_PRIMARY = createField(DSL.name("is_primary"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>system.main.duckdb_indexes.expressions</code>.
     */
    public final TableField<Record, String> EXPRESSIONS = createField(DSL.name("expressions"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>system.main.duckdb_indexes.sql</code>.
     */
    public final TableField<Record, String> SQL = createField(DSL.name("sql"), SQLDataType.VARCHAR, this, "");

    private DuckdbIndexes(Name alias, Table<Record> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DuckdbIndexes(Name alias, Table<Record> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view(), where);
    }

    /**
     * Create an aliased <code>system.main.duckdb_indexes</code> table reference
     */
    public DuckdbIndexes(String alias) {
        this(DSL.name(alias), DUCKDB_INDEXES);
    }

    /**
     * Create an aliased <code>system.main.duckdb_indexes</code> table reference
     */
    public DuckdbIndexes(Name alias) {
        this(alias, DUCKDB_INDEXES);
    }

    /**
     * Create a <code>system.main.duckdb_indexes</code> table reference
     */
    public DuckdbIndexes() {
        this(DSL.name("duckdb_indexes"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Main.MAIN;
    }

    @Override
    public DuckdbIndexes as(String alias) {
        return new DuckdbIndexes(DSL.name(alias), this);
    }

    @Override
    public DuckdbIndexes as(Name alias) {
        return new DuckdbIndexes(alias, this);
    }

    @Override
    public DuckdbIndexes as(Table<?> alias) {
        return new DuckdbIndexes(alias.getQualifiedName(), this);
    }
}
