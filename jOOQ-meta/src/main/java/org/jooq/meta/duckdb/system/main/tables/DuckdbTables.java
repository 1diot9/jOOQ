/*
 * This file is generated by jOOQ.
 */
package org.jooq.meta.duckdb.system.main.tables;


import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.meta.duckdb.system.main.Keys;
import org.jooq.meta.duckdb.system.main.Main;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DuckdbTables extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>system.main.duckdb_tables</code>
     */
    public static final DuckdbTables DUCKDB_TABLES = new DuckdbTables();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>system.main.duckdb_tables.database_name</code>.
     */
    public final TableField<Record, String> DATABASE_NAME = createField(DSL.name("database_name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>system.main.duckdb_tables.database_oid</code>.
     */
    public final TableField<Record, Long> DATABASE_OID = createField(DSL.name("database_oid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>system.main.duckdb_tables.schema_name</code>.
     */
    public final TableField<Record, String> SCHEMA_NAME = createField(DSL.name("schema_name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>system.main.duckdb_tables.schema_oid</code>.
     */
    public final TableField<Record, Long> SCHEMA_OID = createField(DSL.name("schema_oid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>system.main.duckdb_tables.table_name</code>.
     */
    public final TableField<Record, String> TABLE_NAME = createField(DSL.name("table_name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>system.main.duckdb_tables.table_oid</code>.
     */
    public final TableField<Record, Long> TABLE_OID = createField(DSL.name("table_oid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>system.main.duckdb_tables.comment</code>.
     */
    public final TableField<Record, String> COMMENT = createField(DSL.name("comment"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>system.main.duckdb_tables.internal</code>.
     */
    public final TableField<Record, Boolean> INTERNAL = createField(DSL.name("internal"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>system.main.duckdb_tables.temporary</code>.
     */
    public final TableField<Record, Boolean> TEMPORARY = createField(DSL.name("temporary"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>system.main.duckdb_tables.has_primary_key</code>.
     */
    public final TableField<Record, Boolean> HAS_PRIMARY_KEY = createField(DSL.name("has_primary_key"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>system.main.duckdb_tables.estimated_size</code>.
     */
    public final TableField<Record, Long> ESTIMATED_SIZE = createField(DSL.name("estimated_size"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>system.main.duckdb_tables.column_count</code>.
     */
    public final TableField<Record, Long> COLUMN_COUNT = createField(DSL.name("column_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>system.main.duckdb_tables.index_count</code>.
     */
    public final TableField<Record, Long> INDEX_COUNT = createField(DSL.name("index_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>system.main.duckdb_tables.check_constraint_count</code>.
     */
    public final TableField<Record, Long> CHECK_CONSTRAINT_COUNT = createField(DSL.name("check_constraint_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>system.main.duckdb_tables.sql</code>.
     */
    public final TableField<Record, String> SQL = createField(DSL.name("sql"), SQLDataType.VARCHAR, this, "");

    private DuckdbTables(Name alias, Table<Record> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DuckdbTables(Name alias, Table<Record> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view(), where);
    }

    /**
     * Create an aliased <code>system.main.duckdb_tables</code> table reference
     */
    public DuckdbTables(String alias) {
        this(DSL.name(alias), DUCKDB_TABLES);
    }

    /**
     * Create an aliased <code>system.main.duckdb_tables</code> table reference
     */
    public DuckdbTables(Name alias) {
        this(alias, DUCKDB_TABLES);
    }

    /**
     * Create a <code>system.main.duckdb_tables</code> table reference
     */
    public DuckdbTables() {
        this(DSL.name("duckdb_tables"), null);
    }

    public <O extends Record> DuckdbTables(Table<O> path, ForeignKey<O, Record> childPath, InverseForeignKey<O, Record> parentPath) {
        super(path, childPath, parentPath, DUCKDB_TABLES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Main.MAIN;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.SYNTHETIC_PK_DUCKDB_TABLES;
    }

    private transient DuckdbColumns _duckdbColumns;

    /**
     * Get the implicit to-many join path to the
     * <code>system.main.duckdb_columns</code> table
     */
    public DuckdbColumns duckdbColumns() {
        if (_duckdbColumns == null)
            _duckdbColumns = new DuckdbColumns(this, null, Keys.SYNTHETIC_FK_DUCKDB_COLUMNS__SYNTHETIC_PK_DUCKDB_TABLES.getInverseKey());

        return _duckdbColumns;
    }

    @Override
    public DuckdbTables as(String alias) {
        return new DuckdbTables(DSL.name(alias), this);
    }

    @Override
    public DuckdbTables as(Name alias) {
        return new DuckdbTables(alias, this);
    }

    @Override
    public DuckdbTables as(Table<?> alias) {
        return new DuckdbTables(alias.getQualifiedName(), this);
    }
}
