/*
 * This file is generated by jOOQ.
 */
package org.jooq.meta.duckdb.system.main.tables;


import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.meta.duckdb.system.main.Main;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DuckdbSchemas extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>system.main.duckdb_schemas</code>
     */
    public static final DuckdbSchemas DUCKDB_SCHEMAS = new DuckdbSchemas();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>system.main.duckdb_schemas.oid</code>.
     */
    public final TableField<Record, Long> OID = createField(DSL.name("oid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>system.main.duckdb_schemas.database_name</code>.
     */
    public final TableField<Record, String> DATABASE_NAME = createField(DSL.name("database_name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>system.main.duckdb_schemas.database_oid</code>.
     */
    public final TableField<Record, Long> DATABASE_OID = createField(DSL.name("database_oid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>system.main.duckdb_schemas.schema_name</code>.
     */
    public final TableField<Record, String> SCHEMA_NAME = createField(DSL.name("schema_name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>system.main.duckdb_schemas.internal</code>.
     */
    public final TableField<Record, Boolean> INTERNAL = createField(DSL.name("internal"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>system.main.duckdb_schemas.sql</code>.
     */
    public final TableField<Record, String> SQL = createField(DSL.name("sql"), SQLDataType.VARCHAR, this, "");

    private DuckdbSchemas(Name alias, Table<Record> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DuckdbSchemas(Name alias, Table<Record> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view(), where);
    }

    /**
     * Create an aliased <code>system.main.duckdb_schemas</code> table reference
     */
    public DuckdbSchemas(String alias) {
        this(DSL.name(alias), DUCKDB_SCHEMAS);
    }

    /**
     * Create an aliased <code>system.main.duckdb_schemas</code> table reference
     */
    public DuckdbSchemas(Name alias) {
        this(alias, DUCKDB_SCHEMAS);
    }

    /**
     * Create a <code>system.main.duckdb_schemas</code> table reference
     */
    public DuckdbSchemas() {
        this(DSL.name("duckdb_schemas"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Main.MAIN;
    }

    @Override
    public DuckdbSchemas as(String alias) {
        return new DuckdbSchemas(DSL.name(alias), this);
    }

    @Override
    public DuckdbSchemas as(Name alias) {
        return new DuckdbSchemas(alias, this);
    }

    @Override
    public DuckdbSchemas as(Table<?> alias) {
        return new DuckdbSchemas(alias.getQualifiedName(), this);
    }
}
