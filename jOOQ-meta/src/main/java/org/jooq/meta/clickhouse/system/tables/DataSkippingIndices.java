/*
 * This file is generated by jOOQ.
 */
package org.jooq.meta.clickhouse.system.tables;


import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.meta.clickhouse.system.System;
import org.jooq.types.ULong;


/**
 * Contains all the information about all the data skipping indices in tables,
 * similar to system.columns.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DataSkippingIndices extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>system.data_skipping_indices</code>
     */
    public static final DataSkippingIndices DATA_SKIPPING_INDICES = new DataSkippingIndices();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>system.data_skipping_indices.database</code>.
     */
    public final TableField<Record, String> DATABASE = createField(DSL.name("database"), SQLDataType.CHAR.nullable(false).defaultValue(DSL.field(DSL.raw(""), SQLDataType.CHAR)), this, "");

    /**
     * The column <code>system.data_skipping_indices.table</code>.
     */
    public final TableField<Record, String> TABLE = createField(DSL.name("table"), SQLDataType.CHAR.nullable(false).defaultValue(DSL.field(DSL.raw(""), SQLDataType.CHAR)), this, "");

    /**
     * The column <code>system.data_skipping_indices.name</code>.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("name"), SQLDataType.CHAR.nullable(false).defaultValue(DSL.field(DSL.raw(""), SQLDataType.CHAR)), this, "");

    /**
     * The column <code>system.data_skipping_indices.type</code>.
     */
    public final TableField<Record, String> TYPE = createField(DSL.name("type"), SQLDataType.CHAR.nullable(false).defaultValue(DSL.field(DSL.raw(""), SQLDataType.CHAR)), this, "");

    /**
     * The column <code>system.data_skipping_indices.type_full</code>.
     */
    public final TableField<Record, String> TYPE_FULL = createField(DSL.name("type_full"), SQLDataType.CHAR.nullable(false).defaultValue(DSL.field(DSL.raw(""), SQLDataType.CHAR)), this, "");

    /**
     * The column <code>system.data_skipping_indices.expr</code>.
     */
    public final TableField<Record, String> EXPR = createField(DSL.name("expr"), SQLDataType.CHAR.nullable(false).defaultValue(DSL.field(DSL.raw(""), SQLDataType.CHAR)), this, "");

    /**
     * The column <code>system.data_skipping_indices.granularity</code>.
     */
    public final TableField<Record, ULong> GRANULARITY = createField(DSL.name("granularity"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.field(DSL.raw(""), SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column
     * <code>system.data_skipping_indices.data_compressed_bytes</code>.
     */
    public final TableField<Record, ULong> DATA_COMPRESSED_BYTES = createField(DSL.name("data_compressed_bytes"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.field(DSL.raw(""), SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column
     * <code>system.data_skipping_indices.data_uncompressed_bytes</code>.
     */
    public final TableField<Record, ULong> DATA_UNCOMPRESSED_BYTES = createField(DSL.name("data_uncompressed_bytes"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.field(DSL.raw(""), SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>system.data_skipping_indices.marks</code>.
     */
    public final TableField<Record, ULong> MARKS = createField(DSL.name("marks"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.field(DSL.raw(""), SQLDataType.BIGINTUNSIGNED)), this, "");

    private DataSkippingIndices(Name alias, Table<Record> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DataSkippingIndices(Name alias, Table<Record> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("Contains all the information about all the data skipping indices in tables, similar to system.columns."), TableOptions.view(), where);
    }

    /**
     * Create an aliased <code>system.data_skipping_indices</code> table
     * reference
     */
    public DataSkippingIndices(String alias) {
        this(DSL.name(alias), DATA_SKIPPING_INDICES);
    }

    /**
     * Create an aliased <code>system.data_skipping_indices</code> table
     * reference
     */
    public DataSkippingIndices(Name alias) {
        this(alias, DATA_SKIPPING_INDICES);
    }

    /**
     * Create a <code>system.data_skipping_indices</code> table reference
     */
    public DataSkippingIndices() {
        this(DSL.name("data_skipping_indices"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : System.SYSTEM;
    }

    @Override
    public DataSkippingIndices as(String alias) {
        return new DataSkippingIndices(DSL.name(alias), this);
    }

    @Override
    public DataSkippingIndices as(Name alias) {
        return new DataSkippingIndices(alias, this);
    }

    @Override
    public DataSkippingIndices as(Table<?> alias) {
        return new DataSkippingIndices(alias.getQualifiedName(), this);
    }
}
