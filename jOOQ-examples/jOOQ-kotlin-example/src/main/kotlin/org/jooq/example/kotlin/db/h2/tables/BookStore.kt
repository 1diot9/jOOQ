/*
 * This file is generated by jOOQ.
 */
package org.jooq.example.kotlin.db.h2.tables


import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.example.kotlin.db.h2.Public
import org.jooq.example.kotlin.db.h2.keys.FK_B2BS_BS_NAME
import org.jooq.example.kotlin.db.h2.keys.UK_T_BOOK_STORE_NAME
import org.jooq.example.kotlin.db.h2.tables.Book.BookPath
import org.jooq.example.kotlin.db.h2.tables.BookToBookStore.BookToBookStorePath
import org.jooq.example.kotlin.db.h2.tables.records.BookStoreRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BookStore(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, BookStoreRecord>?,
    parentPath: InverseForeignKey<out Record, BookStoreRecord>?,
    aliased: Table<BookStoreRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<BookStoreRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>PUBLIC.BOOK_STORE</code>
         */
        val BOOK_STORE: BookStore = BookStore()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<BookStoreRecord> = BookStoreRecord::class.java

    /**
     * The column <code>PUBLIC.BOOK_STORE.NAME</code>.
     */
    val NAME: TableField<BookStoreRecord, String?> = createField(DSL.name("NAME"), SQLDataType.VARCHAR(400).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<BookStoreRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<BookStoreRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<BookStoreRecord>?, where: Condition): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>PUBLIC.BOOK_STORE</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>PUBLIC.BOOK_STORE</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>PUBLIC.BOOK_STORE</code> table reference
     */
    constructor(): this(DSL.name("BOOK_STORE"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, BookStoreRecord>?, parentPath: InverseForeignKey<out Record, BookStoreRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, BOOK_STORE, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class BookStorePath : BookStore, Path<BookStoreRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, BookStoreRecord>?, parentPath: InverseForeignKey<out Record, BookStoreRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<BookStoreRecord>): super(alias, aliased)
        override fun `as`(alias: String): BookStorePath = BookStorePath(DSL.name(alias), this)
        override fun `as`(alias: Name): BookStorePath = BookStorePath(alias, this)
        override fun `as`(alias: Table<*>): BookStorePath = BookStorePath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<BookStoreRecord> = UK_T_BOOK_STORE_NAME

    private lateinit var _bookToBookStore: BookToBookStorePath

    /**
     * Get the implicit to-many join path to the
     * <code>PUBLIC.BOOK_TO_BOOK_STORE</code> table
     */
    fun bookToBookStore(): BookToBookStorePath {
        if (!this::_bookToBookStore.isInitialized)
            _bookToBookStore = BookToBookStorePath(this, null, FK_B2BS_BS_NAME.inverseKey)

        return _bookToBookStore;
    }

    val bookToBookStore: BookToBookStorePath
        get(): BookToBookStorePath = bookToBookStore()

    /**
     * Get the implicit many-to-many join path to the <code>PUBLIC.BOOK</code>
     * table
     */
    val book: BookPath
        get(): BookPath = bookToBookStore().book()
    override fun `as`(alias: String): BookStore = BookStore(DSL.name(alias), this)
    override fun `as`(alias: Name): BookStore = BookStore(alias, this)
    override fun `as`(alias: Table<*>): BookStore = BookStore(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): BookStore = BookStore(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): BookStore = BookStore(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): BookStore = BookStore(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition): BookStore = BookStore(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): BookStore = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition): BookStore = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>): BookStore = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): BookStore = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): BookStore = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): BookStore = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): BookStore = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): BookStore = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): BookStore = where(DSL.notExists(select))
}
