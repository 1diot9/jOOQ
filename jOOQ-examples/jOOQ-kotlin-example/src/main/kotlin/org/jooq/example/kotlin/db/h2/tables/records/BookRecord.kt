/*
 * This file is generated by jOOQ.
 */
package org.jooq.example.kotlin.db.h2.tables.records


import java.time.LocalDateTime

import org.jooq.Record1
import org.jooq.example.kotlin.db.h2.tables.Book
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BookRecord() : UpdatableRecordImpl<BookRecord>(Book.BOOK) {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var authorId: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var coAuthorId: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var detailsId: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var title: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var publishedIn: Int?
        set(value): Unit = set(5, value)
        get(): Int? = get(5) as Int?

    open var languageId: Int?
        set(value): Unit = set(6, value)
        get(): Int? = get(6) as Int?

    open var contentText: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    open var contentPdf: ByteArray?
        set(value): Unit = set(8, value)
        get(): ByteArray? = get(8) as ByteArray?

    open var recVersion: Int?
        set(value): Unit = set(9, value)
        get(): Int? = get(9) as Int?

    open var recTimestamp: LocalDateTime?
        set(value): Unit = set(10, value)
        get(): LocalDateTime? = get(10) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    /**
     * Create a detached, initialised BookRecord
     */
    constructor(id: Int? = null, authorId: Int? = null, coAuthorId: Int? = null, detailsId: Int? = null, title: String? = null, publishedIn: Int? = null, languageId: Int? = null, contentText: String? = null, contentPdf: ByteArray? = null, recVersion: Int? = null, recTimestamp: LocalDateTime? = null): this() {
        this.id = id
        this.authorId = authorId
        this.coAuthorId = coAuthorId
        this.detailsId = detailsId
        this.title = title
        this.publishedIn = publishedIn
        this.languageId = languageId
        this.contentText = contentText
        this.contentPdf = contentPdf
        this.recVersion = recVersion
        this.recTimestamp = recTimestamp
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised BookRecord
     */
    constructor(value: org.jooq.example.kotlin.db.h2.tables.pojos.Book?): this() {
        if (value != null) {
            this.id = value.id
            this.authorId = value.authorId
            this.coAuthorId = value.coAuthorId
            this.detailsId = value.detailsId
            this.title = value.title
            this.publishedIn = value.publishedIn
            this.languageId = value.languageId
            this.contentText = value.contentText
            this.contentPdf = value.contentPdf
            this.recVersion = value.recVersion
            this.recTimestamp = value.recTimestamp
            resetChangedOnNotNull()
        }
    }
}
