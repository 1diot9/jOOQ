/*
 * This file is generated by jOOQ.
 */
package org.jooq.example.kotlin.db.h2.tables.records


import org.jooq.Record2
import org.jooq.example.kotlin.db.h2.tables.BookToBookStore
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BookToBookStoreRecord() : UpdatableRecordImpl<BookToBookStoreRecord>(BookToBookStore.BOOK_TO_BOOK_STORE) {

    open var bookStoreName: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var bookId: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var stock: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<String?, Int?> = super.key() as Record2<String?, Int?>

    /**
     * Create a detached, initialised BookToBookStoreRecord
     */
    constructor(bookStoreName: String? = null, bookId: Int? = null, stock: Int? = null): this() {
        this.bookStoreName = bookStoreName
        this.bookId = bookId
        this.stock = stock
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised BookToBookStoreRecord
     */
    constructor(value: org.jooq.example.kotlin.db.h2.tables.pojos.BookToBookStore?): this() {
        if (value != null) {
            this.bookStoreName = value.bookStoreName
            this.bookId = value.bookId
            this.stock = value.stock
            resetChangedOnNotNull()
        }
    }
}
